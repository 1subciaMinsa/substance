import { platform, DefaultDOMElement as DOM, DefaultDOMElement } from 'substance'

// ATTENTION: have to use a custom getMountPoint because
// during the tests we change the behavior of platform and DefaultDOMElement
export function getMountPoint (t) {
  if (platform.inBrowser) {
    if (t.sandbox) {
      // let el = t.sandbox.createElement('div')
      // HACK: struggling to avoid that the wron substance API is used
      // i.e. substance-test is using its own version. When using the sandbox element
      // generated by the test-suite, we will not 'see' elements and components
      // created with the substance API used here
      let el = DefaultDOMElement.wrap(window.document).createElement('div')
      t.sandbox.append(el)
      return el
    } else {
      let bodyEl = DOM.wrap(window.document.body)
      let sandboxEl = bodyEl.createElement('div')
      bodyEl.append(sandboxEl)
      return sandboxEl
    }
  } else {
    // otherwise we create a detached DOM
    let htmlDoc = DOM.parseHTML('<html><body></body></html>')
    return htmlDoc.find('body')
  }
}

export class DOMEvent {
  constructor (props) {
    Object.assign(this, props)
  }
  stopPropagation () {}
  preventDefault () {}
}

export function createSurfaceEvent (surface, eventData) {
  return new DOMEvent(Object.assign({ target: surface.getNativeElement() }, eventData))
}
